#include <SPI.h>
#include <MFRC522.h>
#include <Keypad.h>
#include <Wire.h> 

#define SS_PIN 10
#define RST_PIN 9
MFRC522 mfrc522(SS_PIN, RST_PIN); //maak MFRC522 instantie aan

int dataIntegrity; //zorgt ervoor dat de juiste data ontvangen wordt vanuit de GUI
String controleString; //de totale ontvangen string met daarin het aantal cijfers van het bedrag, de bon en het bedrag zelf
int lengte; //de lengte van het bedrag
int bedrag[10]; //de ontvangen controlestring wordt opgedeeld in losse cijfers (hier eigenlijk nog char's) binnen een array
String stringBedrag; //het bedrag dat uit de controlestring wordt gehaald
char key; //de ingedrukte key van de keypad
int c; //de ingedrukte key, omgezet naar een int
int bon; //of de gebruiker de bon wil, 1 = ja, 0 = nee
int code; //deze code krijgt de Arduino door vanuit de GUI, deze code geeft aan welke methode hij moet aanroepen
int data; //data die de Arduino via I2C van de dispenser ontvangt
const byte ROWS = 4; //rijen
const byte COLS = 4; //kolommen
 
//-----------------de keymap-----------------
char keys[ROWS][COLS] = {
{'1','2','3','A'},
{'4','5','6','B'},
{'7','8','9','C'},
{'*','0','#','D'}
};

byte rowPins[ROWS] = {A1,A0,3,4}; //pins van de rijen
byte colPins[COLS] = {5,6,7,8}; //pins van de kolommen

Keypad keypad = Keypad( makeKeymap(keys), rowPins, colPins, ROWS, COLS );
//--------------------------------------------

void setup() 
{
  Serial.begin(9600); //begin de seriÃ«le communicatie met een baudrate van 9600
  SPI.begin(); //start de SPI bus
  mfrc522.PCD_Init(); //start het beginproces van de RFID reader
  Wire.begin(0); //begin de I2C verbinding met adres 0
  Wire.onReceive(receiveData); 
}

void loop() {
  if (data == 112){ //wannneer 112 ontvangen wordt van de dispenser (de dispenser is dus klaar)
    Serial.write(112); //geef dit door aan de GUI zodat deze ook weer naar het beginscherm gaat
    Serial.flush();
    data = 0; //de ontvangen dat wordt gereset
  }

  while(Serial.available()) {
    code = Serial.read(); //lees de code af die vanuit de GUI wordt gestuurd om een bepaalde methode te runnen
      if (code == '1') {
         kaartScan(); //laat de arduino de kaart scannen
      } else if (code == '2'){
          normaleKeypad(); //gebruik puur de keypad
        } else if (code == '3'){
            dataOntvangen(); //krijg data door vanuit de GUI (het op te nemen bedrag en de bonkeuze)
          }
  }
}

void dataOntvangen(){
 for (int y=0; y<3; y++){ //loop hier meerdere keren doorheen, om onbekende redenen krijgt de Arduino niet de juiste data binnen de eerste keer
   
   while(Serial.available()) {

    lengte = Serial.read(); //lees af hoe lang de string is die de Arduino moet ontvangen
    bon = Serial.read(); //check of de bon moet worden uitgeprint of niet

      for(int i = 0; i<(lengte - '0'); i++){ //loop door de getallen die na de lengte en de bonkeuze komen
        bedrag[i] = Serial.read(); //sla elk getal los op in een array, dit samen is het gewenste bedrag
      }
   }
  
    delay(1000); //een kleine time-out om problemen te voorkomen, wanneer deze niet aanwezig zijn raakt unity (de GUI) in paniek 

    stringBedrag = ""; //begin met een lege string voordat je aan de volgende for-loop begint
    
    for(int i = 0; i<(lengte - '0'); i++){
      stringBedrag = stringBedrag + String(bedrag[i]-48); //dit is het uiteindelijke bedrag dat uitgegeven moet worden door de dispenser
    }
    
    controleString = String(lengte-48) + String(bon-48) + stringBedrag; //de volledige ontvangen string nu aan elkaar geplakt (ontvangen in losse stukken)
    Serial.println(controleString);
    Serial.flush();
    delay(1000); //een kleine time-out om problemen te voorkomen, wanneer deze niet aanwezig zijn raakt unity (de GUI) in paniek 
    Serial.println(stringBedrag);
    Serial.flush();
    delay(1000); //een kleine time-out om problemen te voorkomen, wanneer deze niet aanwezig zijn raakt unity (de GUI) in paniek 

   dataIntegrity++; //om onbekende redenen krijgt de Arduino niet de juiste data binnen de eerste keer, stuur de data de eerste keer dus nog niet naar de dispenser

   if (dataIntegrity > 1){
      if (bon == '1'){ //wanneer bon value 1 heeft (een char, eigenlijk staat er bon == 48 + 1), maak hier dan een echte "int" 1 van
          bon = 1;
      }else{
        bon = 0; //maak er anders een "int" 0 van 
      }
    dataSturen(); //verstuur de data naar de dispenser
  }
 }
 
}


void dataSturen(){
  
  Wire.beginTransmission(8);
  Wire.write(stringBedrag.toInt()); //stuur het op te nemen bedrag naar de dispenser (maak er eerst nog even een integer van)
  Wire.write(bon); //stuur de bonkeuze naar de dispenser
  Wire.endTransmission();   
  
  while (data!=112){
    //zolang we geen 112 ontvangen van de dispenser, is hij nog niet klaar. lekker blijven wachten.
  }

}

void receiveData(int numBytes){ //wanneer we iets ontvangen van de dispenser

   data = Wire.read(); //lees het af
   loop(); //begin de loop weer vanaf het begin
}

 void kaartScan() {
  //bekijk of er een nieuwe kaart voor de lezer wordt gehouden
  if ( ! mfrc522.PICC_IsNewCardPresent()) {
    return;
  }
  //selecteer een kaart
  if ( ! mfrc522.PICC_ReadCardSerial()) {
    return;
  }
 
  String content= "";
  byte letter;
  
  for (byte i = 0; i < mfrc522.uid.size; i++) {
     content.concat(String(mfrc522.uid.uidByte[i] < 0x10 ? " 0" : " "));
     content.concat(String(mfrc522.uid.uidByte[i], HEX));
  }
  
  content.toUpperCase(); //maak hoofletters van de gehele string
  String kaartNummer = content.substring(1);
  Serial.println(kaartNummer); //stuur naar de GUI het kaartnummer van de kaart die gescand is
 
}

 void normaleKeypad() {
  
  while (key == NO_KEY){ //wanneer er geen key is ingedrukt
  key = keypad.getKey();
  c = (int)key - 48; //char omzetten naar int
  }

    while(Serial.available()) {
    int code = Serial.read(); //lees de code (opdracht) die de GUI stuurt

      if (code == '1') {
         kaartScan(); //laat de arduino de kaart scannen
      } 
  }
  
  if (key != NO_KEY){ //wanneer er een key is ingedrukt
  Serial.write(c); //geef deze key door aan de GUI
  Serial.flush();
  key = NO_KEY; //reset de key
  }
 }
